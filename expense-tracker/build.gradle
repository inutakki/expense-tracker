/*plugins {
    id "org.sonarqube" version "1.1"
}*/


apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.vinsol.expensetracker"
        minSdkVersion 8
        targetSdkVersion 8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

}

// nexus repository plugin
//apply plugin: 'com.bmuschko.nexus'
//apply plugin: 'com.jfrog.artifactory'

/*nexus {
    sign = false
    repositoryUrl = 'http://localhost:8081/nexus/content/repositories/releases/'
    snapshotRepositoryUrl = 'http://localhost:8081/nexus/content/repositories/internal-snapshots/'
}*/


dependencies {
    compile 'com.google.code.gson:gson:2.2.1'
    compile files('libs/AndroidPdfLib.jar')
    compile files('libs/FlurryAgent.jar')
    compile files('libs/httpmime-4.2.jar')

    // integration testing
    //agent 'org.aspectj:aspectjweaver:${aspectjVersion}'
    //testCompile 'ru.yandex.qatools.allure:allure-testng-adaptor:${allureVersion}'
    testCompile 'org.testng:testng:6.8'


    // Unit testing dependencies
    testCompile 'junit:junit:4.12'
    // Set this dependency if you want to use Mockito
    testCompile 'org.mockito:mockito-core:1.10.19'
    // Set this dependency if you want to use Hamcrest matching
    testCompile 'org.hamcrest:hamcrest-library:1.1'
    // Set this dependency if you want to use Roboelectric
    // testCompile "org.robolectric:robolectric:3.0-SNAPSHOT"
}

//Test Logging
tasks.withType(Test) {

}


/*buildscript {
    repositories {
        jcenter()
     }
     dependencies{
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"

    }
}*/


/*allprojects {
    repositories {
        jcenter()

        maven {
            url 'http://localhost:8081/artifactory/plugins-release'
            credentials {
                username = "admin"
                password = "password"
            }
        }
    }

}*/


  group = 'com.my.package'
  version = "1.0"

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'



/*allprojects {
    repositories {
        maven {
            url 'http://localhost:8081/artifactory/globalmaven'
            credentials {
                username="admin"
                password="password"
            }
        }
    }
    
    }*/
    
    
  /*  artifactoryPublish {
    clientConfig.info.setBuildName('My_special_build_name')
    clientConfig.info.setBuildNumber('1')
}*/

configurations { published }
	
	artifacts { published file ("build/outputs/apk/expense-tracker-debug.apk") }
	artifacts { published file ("build/outputs/apk/expense-tracker-debug-unaligned.apk") }
	artifacts { published file ("build/outputs/apk/expense-tracker-release-unsigned.apk") }
	
	task uploadLabel(type: Upload) {
	        configuration=configurations.published
	        repositories {
	          maven {
	                url 'http://localhost:8081/artifactory'
	                credentials {
	                username='admin'
	               password='password'
	                }
	         }
	       }
	     }
artifactory {
  contextUrl = 'http://localhost:8081/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    contextUrl = 'http://localhost:8081/artifactory'   //The base Artifactory URL for the publisher
    //A closure defining publishing information
    repository {
      repoKey = 'libs-snapshot-local'   //The Artifactory repository key to publish to
      username = 'admin'          //The publisher user name
      password = 'password'       //The publisher password
      ivy {
        //Optional section for configuring Ivy publication. Assumes Maven repo layout if not specified
        ivyLayout = '[organization]/[module]/[revision]/[type]s/ivy-[revision].xml'
        artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
        mavenCompatible = true //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
      }
    }
     defaults {
            
           publishConfigs('published')
           properties=['build.status': "$it.project.status".toString()]
           properties{
           	mavenJava 'org.jfrog:*:*:*@*', key1: 'val1'
           }
           publishArtifacts = true
            publishPom = true
            publishIvy = true
        }
    }
  resolve {
    contextUrl = 'http://localhost:8081/artifactory'   //The base Artifactory URL for the resolver
    repository {
      repoKey = 'libs-releases'  //The Artifactory (preferably virtual) repository key to resolve from
     
    }
  }
  // Redefine basic properties of the build info object
  //clientConfig.setIncludeEnvVars(true)
 // clientConfig.info.addEnvironmentProperty('test.adding.dynVar',new java.util.Date().toString())
  clientConfig.info.setBuildName("${project.name}")
  clientConfig.info.setBuildNumber('' + new java.util.Random(System.currentTimeMillis()).nextInt(20000))
  clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
}


/*artifactory {
    contextUrl = 'http://localhost:8081/artifactory'
    publish {
        repository {
            repoKey = 'Libs-snapshot-local'
            username = 'admin'
            password = 'password'

           // username = project.getProperties().artifactory_user
            //password = project.getProperties().artifactory_password
        }
        defaults {
            publishArtifacts = true
            publishPom = false
            publishIvy = false
        }
    }
    resolve {
        repository {
            repoKey = 'globalmaven'
        }
    }
}

}*/

publishing.publications {
    apk(MavenPublication) {
        groupId group
        artifactId 'MyArtifact'
        artifact("builds/outputs/apk/expense-tracker-debug.apk")
    }
}
